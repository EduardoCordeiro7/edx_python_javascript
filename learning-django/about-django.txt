história:
Django foi inicialmente desenvolvido entre 2003 e 2005 por um time de web que
era responsavel por criar e manter sites de jornal. Depos de criar um numero de
sites, o time começou a fatorar e reutilizar muitos de seus códigos comuns e
padrões de design. Esse código comum evoluiu para um framework genérico de
desenvolvimento web, que foi lançado como um projeto de código aberto nomeado
"Django" em Julho de 2005.

definição:
Django é um framework web Python de alto nível que permite o rápido
desenvolvimento de sites seguros e de fácil manutenção. Construido por
desenvolvedores experientes, o Django cuida de grande parte do trabalho de
desenvolvimento web, para que você possa se concentrar em escrever seu
aplicativo sem precisar reinventar a roda. É gratuito e de código aberto, tem
uma comunidade próspera e ativa, ótima documentação e muitas opções de suporte
gratuito e pago.

principais características:
  - escrito em python
  - utiliza o padrão model-template-view(mtv)
  model template view:
    Model: Mapeamento do banco de dados para o projeto;
    Template: Páginas para visualização de dados. Normalmente, é aqui que fica o HTML que será renderizado nos navegadores;
    View: Lógica de negócio. É aqui que determinamos o que irá acontecer em nosso projeto.
    Toda esta arquitetura é interligada e conversam entre si.
    Uma depende da outra para realizar um determinado serviço e, no final, executar a tarefa que o usuário solicitou.

referencias:
https://developer.mozilla.org/pt-BR/docs/Learn/Server-side/Django/Introdu%C3%A7%C3%A3o

Criando um novo projeto com o django:
comando para criar os arquivos do projeto: django-admin startproject [nome do
projeto]
comando para executar o django: python3 manage.py (seguido do comando ex: runserver)

um projeto no django é composto por diversas subdivisões que são chamados de apps destinados para cada funcionalidade.
comando para criar um novo app com o django: python3 manage.py startapp [nome do app]
após a criação de um app dentro do projeto, precisamos instalar essa aplicação dentro do projeto no arquivo settings.py
podemos criar dentro do arquivo views.py o que queremos exibir quando o usuário entrar nessa nossa aplicação.
criando uma função que recebe o argumento como uma requisição por parte do usuário.
o próximo passo é criar uma regra que aponte uma url para esta função. Editando o arquivo urls.py (é importante que cada aplicação tenha um arquivo urls.py próprio)
Após isso precisamos editar o arquivo urls.py do projeto todo, e não da aplicação especificamente (ex:7

Dentro da nossa aplicação criada podemos adicionar uma pasta chamada templates, que onde será direcionado através do arquivo views e url uma rota
para este template. Isso seria um simples arquivo .html com as especificações do framework django, ou seja, podemos adicionar funcionalidades de uma linguagem
de programação dentro do arquivo html através dos django's templates.

Existe uma funcionalidade dentro do django para separar os arquivos dinâmicos (ex: web pages) e os arquivos estáticos (styles for the web pages).
O django lida com esses arquivos criando uma pasta chamada static dentro da pasta raiz da aplicação.
Após isso, podemos incorporar esses arquivos estáticos dentro da nossa página: {% load static %}
E chamar isso dentro do nossa head do html: <link href="{% static 'newyear/styles.css' rel="stylesheet" %}">
Perceba que isso é uma boa prática criada pelo django facilitando como carregamos arquivos na nossa página dinamica.

No django, como no flask, para facilitar a nossa vida em relação a criação de páginas html,
existe uma funciolodade chamada de herança de template. Na qual herdam um layout definido.


TRABALHANDO COM MODELS:
Para criar um banco de dados baseado no nosso modelo que definimos naquele app, navegamos até o diretório principal do projeto
e rodamos o seguinte comando:
    python manage.py makemigrations
Este comando cria alguns arquivos Python que criarão ou editarão nosso banco de dados para poder armazenar o que temos em nossos modelos.
Este processo também é chamado de migration. (aplicando as alterações do nosso modelo no banco de dados)
Para de fato fazer esse processo de aplicar as alterações do modelo no banco de dados, usamos o comando:
    python manage.py migrate

INTERAGINDO COM ESTE MODELO CRIADO DENTRO DO BANCO DE DADOS:
1 maneira: poderiamos utilizar a linguagem SQL e interagir diretamente com o banco, entretanto o django nos possibilita uma abstração através da linguagem pyhton
Podemos utilizar o shell do django com o comando: python manage.py shell

COMANDOS dentro do shell para interagir com o BANCO DE DADOS:
Escrevendo em uma tabela:
    from flights.models import Flight
    f = Flights(origin="New York", destination="London", duration=415)
    f.save()

Listando todos os objetos desta tabela:
    Flights.objects.all()
    Entretanto, podem ser interessante criarmos uma representação de string para esse objeto:
    No arquivo models.py criamos uma função __str__ que retorna essa representação.

    No shell:
    >>> from flights.models import Flights
    >>> flights = Flights.objects.all()
    >>> flights
        <QuerySet [<Flights: 1: New York to London>]>
    >>> flight = flights.first()
    >>> flight
        <QuerySet [<Flights: 1: New York to London>]>
    >>> flight.id
        1
    >>> flight.origin
        'New York'
    >>> flight.destination
        'London'
    >>> flight.duration
        415
    >>> flights.delete()
        (1, {'flights.Flights': 1})

RELACIONAMENTO ENTRE MODELOS (TABELAS):
Django permite que você defina relações que são um pra um (OneToOneField), um pra muitos (ForeignKey) e muitos pra muitos (ManyToManyField).








URLS.py: É o arquivo onde será configurado todas as rotas de urls dinâmicas, direcionando cada respectiva rota para sua função de uma aplicação no projeto
VIEWS.py: Pode ser definido como algo que será mostrado para usuário.
MODELS.py: Será nessa arquivo que iremos escrever nossos modelos através de classes do python. Após isso o Django será
responsável para lidar com a comunicação com o banco de dados e também com o trabalho do SQL.
Dentro do arquivo models, podemos pensar como cada modelo será destinado para cada tabela principal do banco.








